import { Injectable } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { DebtStatistic } from '../debt_statistics/debt_statistic.entity';
import { WinstonLogger } from '../common/winston.logger';

@Injectable()
export class DebtStatisticsCronjobService {
  private readonly logger = new WinstonLogger(DebtStatisticsCronjobService.name);

  constructor(
    @InjectRepository(DebtStatistic)
    private debtStatisticRepo: Repository<DebtStatistic>,
  ) {
    this.logger.log(
      'üéØ [DebtStatisticsCronjobService] Service ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o - Cronjob debt statistics s·∫Ω ch·∫°y l√∫c 23h h√†ng ng√†y',
    );
  }

  @Cron(process.env.CRON_DEBT_STATISTICS_TIME || '0 23 * * *')
  async handleDebtStatisticsCron() {
    const executionStartTime = new Date();
    // X√°c ƒë·ªãnh ng√†y t·∫°i VN (UTC+7) v√† ph·∫°m vi th·ªùi gian [start, end) theo UTC ƒë·ªÉ truy v·∫•n
    const { dayStr: todayStr, startUtcStr, endUtcStr } = this.getVietnamDayRangeStrings();

    this.logger.log('=== B·∫ÆT ƒê·∫¶U DEBT STATISTICS CRONJOB ===');
    this.logger.log(`üîÑ [Debt Statistics Cron] Th·ª±c hi·ªán cho ng√†y: ${todayStr}`);
    this.logger.log(`üïê Th·ªùi gian b·∫Øt ƒë·∫ßu: ${this.formatDateTime(executionStartTime)}`);

    try {
      // B·∫£o v·ªá ch·∫°y tr√πng b·∫±ng MySQL advisory lock theo ng√†y
      const lockKey = `debt_stats:${todayStr}`;
      const lockRes = await this.debtStatisticRepo.query('SELECT GET_LOCK(?, 0) AS got', [lockKey]);
      const gotLock = Number(lockRes?.[0]?.got) === 1;
      if (!gotLock) {
        this.logger.warn(`‚õî [Debt Statistics Cron] B·ªè qua v√¨ kh√¥ng l·∫•y ƒë∆∞·ª£c lock cho key ${lockKey} (ƒëang c√≥ t√°c v·ª• kh√°c ch·∫°y)`);
        return;
      }

      // ƒê·∫£m b·∫£o unique index ƒë·ªÉ idempotent theo (statistic_date, original_debt_id)
      await this.ensureUniqueIndex();

      // Ki·ªÉm tra ƒë√£ c√≥ data cho ng√†y h√¥m nay ch∆∞a
      const existing = await this.debtStatisticRepo.query(
        'SELECT COUNT(*) AS c FROM debt_statistics WHERE statistic_date = ?',
        [todayStr],
      );
      const existingCount = Number(existing?.[0]?.c || 0);

      if (existingCount > 0) {
        this.logger.log(`‚ö†Ô∏è [Debt Statistics Cron] ƒê√£ c√≥ ${existingCount} b·∫£n ghi cho ng√†y ${todayStr}, b·ªè qua`);
        // Release lock tr∆∞·ªõc khi tho√°t
        await this.debtStatisticRepo.query('SELECT RELEASE_LOCK(?)', [lockKey]);
        return;
      }

      // Insert d·ªØ li·ªáu clean s·∫µn - kh√¥ng tr√πng l·∫∑p t·ª´ ƒë·∫ßu
      const insertedCount = await this.insertCleanDebtStatistics(todayStr, startUtcStr, endUtcStr);

      const executionEndTime = new Date();
      const executionTime = executionEndTime.getTime() - executionStartTime.getTime();

      this.logger.log('=== K·∫æT QU·∫¢ DEBT STATISTICS CRONJOB ===');
      this.logger.log(`‚úÖ ƒê√£ insert: ${insertedCount} b·∫£n ghi clean cho ng√†y ${todayStr}`);
      this.logger.log(`‚è±Ô∏è Th·ªùi gian th·ª±c hi·ªán: ${executionTime}ms`);
      this.logger.log(`üïê Ho√†n th√†nh l√∫c: ${this.formatDateTime(executionEndTime)}`);
      this.logger.log('=== K·∫æT TH√öC DEBT STATISTICS CRONJOB ===');

    } catch (error) {
      this.logger.error('‚ùå [Debt Statistics Cron] L·ªói trong qu√° tr√¨nh th·ª±c hi·ªán:', error.stack);
      throw error;
    } finally {
      // Lu√¥n c·ªë g·∫Øng release lock (n·∫øu c√≥)
      try {
        const { dayStr } = this.getVietnamDayRangeStrings();
        const lockKey = `debt_stats:${dayStr}`;
        await this.debtStatisticRepo.query('SELECT RELEASE_LOCK(?)', [lockKey]);
      } catch (e) {
        // ignore
      }
    }
  }

  /**
   * Insert d·ªØ li·ªáu clean theo batch - lo·∫°i b·ªè duplicate b·∫±ng unique index + INSERT IGNORE
   */
  private async insertCleanDebtStatistics(todayStr: string, startUtcStr: string, endUtcStr: string): Promise<number> {
    this.logger.log(`üì• [Insert Clean] B·∫Øt ƒë·∫ßu insert d·ªØ li·ªáu clean cho ng√†y ${todayStr}`);

    try {
      // B∆∞·ªõc 1: ƒê·∫øm t·ªïng s·ªë records c·∫ßn insert
      const countQuery = `
        SELECT COUNT(d.id) as total
        FROM debts d
        LEFT JOIN debt_configs dc ON d.debt_config_id = dc.id
        WHERE d.deleted_at IS NULL
        AND d.updated_at >= ? AND d.updated_at < ?
      `;
      const countResult = await this.debtStatisticRepo.query(countQuery, [startUtcStr, endUtcStr]);
      const totalRecords = countResult[0]?.total || 0;

      this.logger.log(`üìä [Insert Clean] T·ªïng s·ªë records c·∫ßn insert: ${totalRecords}`);

      if (totalRecords === 0) {
        this.logger.log(`‚ö†Ô∏è [Insert Clean] Kh√¥ng c√≥ debt n√†o ƒë∆∞·ª£c update trong ng√†y ${todayStr}`);
        return 0;
      }

      // B∆∞·ªõc 2: Quy·∫øt ƒë·ªãnh insert batch hay single
      const BATCH_SIZE = 1000;
      if (totalRecords <= BATCH_SIZE) {
        // Insert single n·∫øu √≠t h∆°n threshold
        return await this.insertSingleBatch(todayStr, startUtcStr, endUtcStr);
      } else {
        // Insert theo batch n·∫øu nhi·ªÅu h∆°n threshold
        return await this.insertMultipleBatches(todayStr, startUtcStr, endUtcStr, BATCH_SIZE, totalRecords);
      }

    } catch (error) {
      this.logger.error(`‚ùå [Insert Clean] L·ªói khi insert d·ªØ li·ªáu clean:`, error.message);
      throw error;
    }
  }

  /**
   * Insert single batch (d∆∞·ªõi 1000 records)
   */
  private async insertSingleBatch(todayStr: string, startUtcStr: string, endUtcStr: string): Promise<number> {
    this.logger.log(`üì• [Single Insert] Insert t·∫•t c·∫£ records trong 1 l·∫ßn`);

    const query = `
      INSERT IGNORE INTO debt_statistics (
        statistic_date, customer_raw_code, invoice_code, bill_code,
        total_amount, remaining, issue_date, due_date, pay_later,
        status, sale_id, sale_name_raw, employee_code_raw,
        debt_config_id, customer_code, customer_name, note,
        is_notified, original_created_at, original_updated_at, original_debt_id
      )
      SELECT
        ? AS statistic_date,
        d.customer_raw_code, d.invoice_code, d.bill_code,
        d.total_amount, d.remaining, d.issue_date, d.due_date, d.pay_later,
        d.status, d.sale_id, d.sale_name_raw, d.employee_code_raw,
        d.debt_config_id, dc.customer_code, dc.customer_name, d.note,
        d.is_notified, d.created_at, d.updated_at, d.id
      FROM debts d
      LEFT JOIN debt_configs dc ON d.debt_config_id = dc.id
      WHERE d.deleted_at IS NULL
      AND d.updated_at >= ? AND d.updated_at < ?
      ORDER BY d.id ASC
    `;

    const result: any = await this.debtStatisticRepo.query(query, [todayStr, startUtcStr, endUtcStr]);
    const insertedCount = Number(result?.affectedRows || 0);

    this.logger.log(`‚úÖ [Single Insert] ƒê√£ insert ${insertedCount} b·∫£n ghi clean`);
    return insertedCount;
  }

  /**
   * Insert multiple batches (tr√™n 2000 records)
   */
  private async insertMultipleBatches(todayStr: string, startUtcStr: string, endUtcStr: string, batchSize: number, totalRecords: number): Promise<number> {
    this.logger.log(`üì¶ [Batch Insert] Insert theo batch - Size: ${batchSize}, Total: ${totalRecords}`);

    let totalInserted = 0;
    let offset = 0;
    let batchNumber = 1;

    while (offset < totalRecords) {
      this.logger.log(`üîÑ [Batch Insert] ƒêang x·ª≠ l√Ω batch ${batchNumber} (offset: ${offset}, limit: ${batchSize})`);

      try {
        const batchQuery = `
          INSERT IGNORE INTO debt_statistics (
            statistic_date, customer_raw_code, invoice_code, bill_code,
            total_amount, remaining, issue_date, due_date, pay_later,
            status, sale_id, sale_name_raw, employee_code_raw,
            debt_config_id, customer_code, customer_name, note,
            is_notified, original_created_at, original_updated_at, original_debt_id
          )
          SELECT
            ? AS statistic_date,
            d.customer_raw_code, d.invoice_code, d.bill_code,
            d.total_amount, d.remaining, d.issue_date, d.due_date, d.pay_later,
            d.status, d.sale_id, d.sale_name_raw, d.employee_code_raw,
            d.debt_config_id, dc.customer_code, dc.customer_name, d.note,
            d.is_notified, d.created_at, d.updated_at, d.id
          FROM debts d
          LEFT JOIN debt_configs dc ON d.debt_config_id = dc.id
          WHERE d.deleted_at IS NULL
          AND d.updated_at >= ? AND d.updated_at < ?
          ORDER BY d.id ASC
          LIMIT ? OFFSET ?
        `;

        const result: any = await this.debtStatisticRepo.query(batchQuery, [
          todayStr, startUtcStr, endUtcStr, batchSize, offset,
        ]);

        const batchInserted = Number(result?.affectedRows || 0);
        totalInserted += batchInserted;

        this.logger.log(`‚úÖ [Batch Insert] Batch ${batchNumber}: ƒê√£ insert ${batchInserted} records (Total: ${totalInserted})`);

        // N·∫øu batch n√†y √≠t h∆°n batchSize th√¨ ƒë√£ h·∫øt data
        if (batchInserted < batchSize) {
          this.logger.log(`üì¶ [Batch Insert] Batch ${batchNumber} l√† batch cu·ªëi c√πng`);
          break;
        }

        offset += batchSize;
        batchNumber++;

        // Delay nh·ªè gi·ªØa c√°c batch ƒë·ªÉ tr√°nh overload
        await this.delay(200); // 200ms delay

      } catch (error) {
        this.logger.error(`‚ùå [Batch Insert] L·ªói trong batch ${batchNumber}:`, error.message);
        throw error;
      }
    }

    this.logger.log(`üéØ [Batch Insert] Ho√†n th√†nh: ${totalInserted} records trong ${batchNumber} batch(es)`);
    return totalInserted;
  }

  /**
   * Utility function ƒë·ªÉ delay gi·ªØa c√°c batch
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Format datetime ƒë·ªÉ hi·ªÉn th·ªã r√µ r√†ng
   */
  private formatDateTime(date: Date): string {
    return date.toLocaleString('vi-VN', {
      timeZone: 'Asia/Ho_Chi_Minh',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });
  }

  /**
   * Tr·∫£ v·ªÅ ng√†y (YYYY-MM-DD) t·∫°i VN v√† c·∫∑p th·ªùi ƒëi·ªÉm UTC d·∫°ng chu·ªói 'YYYY-MM-DD HH:mm:ss'
   * t∆∞∆°ng ·ª©ng v·ªõi [00:00:00, 24:00:00) theo gi·ªù VN.
   */
  private getVietnamDayRangeStrings(): { dayStr: string; startUtcStr: string; endUtcStr: string } {
    // L·∫•y th·ªùi ƒëi·ªÉm hi·ªán t·∫°i r·ªìi quy ƒë·ªïi sang gi·ªù VN ƒë·ªÉ l·∫•y dayStr
    const now = new Date();
    const vnNow = new Date(now.getTime() + 7 * 60 * 60 * 1000); // UTC+7 (VN kh√¥ng c√≥ DST)
    const [dayStr] = vnNow.toISOString().split('T'); // YYYY-MM-DD theo ng·ªØ c·∫£nh VN ƒë√£ offset

    // T·∫°o m·ªëc th·ªùi gian VN
    const startVn = new Date(`${dayStr}T00:00:00+07:00`);
    // end l√† 00:00 c·ªßa ng√†y k·∫ø ti·∫øp VN
    const endVn = new Date(new Date(`${dayStr}T00:00:00+07:00`).getTime() + 24 * 60 * 60 * 1000);

    // Chuy·ªÉn sang UTC string MySQL (YYYY-MM-DD HH:mm:ss)
    const startUtcStr = this.toMysqlDateTime(startVn);
    const endUtcStr = this.toMysqlDateTime(endVn);

    return { dayStr, startUtcStr, endUtcStr };
  }

  private toMysqlDateTime(d: Date): string {
    const pad = (n: number) => n.toString().padStart(2, '0');
    const yyyy = d.getUTCFullYear();
    const mm = pad(d.getUTCMonth() + 1);
    const dd = pad(d.getUTCDate());
    const HH = pad(d.getUTCHours());
    const MM = pad(d.getUTCMinutes());
    const SS = pad(d.getUTCSeconds());
    return `${yyyy}-${mm}-${dd} ${HH}:${MM}:${SS}`;
  }

  /**
   * ƒê·∫£m b·∫£o unique index t·ªìn t·∫°i ƒë·ªÉ ch·ªëng tr√πng: (statistic_date, original_debt_id)
   * N·∫øu ƒë√£ t·ªìn t·∫°i s·∫Ω b·ªè qua l·ªói.
   */
  private async ensureUniqueIndex(): Promise<void> {
    try {
      // Ki·ªÉm tra nhanh qua information_schema
      const check = await this.debtStatisticRepo.query(
        `SELECT COUNT(1) AS c
         FROM information_schema.statistics
         WHERE table_schema = DATABASE()
           AND table_name = 'debt_statistics'
           AND index_name = 'uniq_stat_date_debt'`
      );
      const exists = Number(check?.[0]?.c || 0) > 0;
      if (exists) return;

      this.logger.log('üîê [Index] T·∫°o unique index uniq_stat_date_debt(statistic_date, original_debt_id)');
      await this.debtStatisticRepo.query(
        'ALTER TABLE debt_statistics ADD UNIQUE KEY uniq_stat_date_debt (statistic_date, original_debt_id)'
      );
    } catch (e) {
      // N·∫øu l·ªói v√¨ ƒë√£ t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ quy·ªÅn, ghi log c·∫£nh b√°o v√† ti·∫øp t·ª•c.
      this.logger.warn(`‚ö†Ô∏è [Index] Kh√¥ng th·ªÉ t·∫°o unique index (c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i): ${e?.message || e}`);
    }
  }
}