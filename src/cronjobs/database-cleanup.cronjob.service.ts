import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { DatabaseChangeLog } from '../observers/change_log.entity';

@Injectable()
export class DatabaseCleanupCronjobService {
  private readonly logger = new Logger(DatabaseCleanupCronjobService.name);

  constructor(
    @InjectRepository(DatabaseChangeLog)
    private changeLogRepository: Repository<DatabaseChangeLog>,
  ) {
    this.logger.log(
      'üéØ [DatabaseCleanupCronjobService] Service ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o - Cronjob x√≥a database_change_log s·∫Ω ch·∫°y l√∫c 23h ƒë√™m h√†ng ng√†y (gi·ªù Vi·ªát Nam)',
    );
  }

  /**
   * Cronjob x√≥a database_change_log theo batch m·ªói ng√†y l√∫c 23h ƒë√™m gi·ªù Vi·ªát Nam
   * Cron expression: '0 23 * * *' = 23:00 m·ªói ng√†y
   * X√≥a theo batch ƒë·ªÉ tr√°nh t·∫£i n·∫∑ng cho database
   */
  @Cron(process.env.CRON_DB_CLEANUP_TIME || '0 23 * * *', {
    timeZone: 'Asia/Ho_Chi_Minh', // S·ª≠ d·ª•ng timezone Vi·ªát Nam
  })
  async clearDatabaseChangeLog() {
    const vietnamTime = new Date().toLocaleString('vi-VN', {
      timeZone: 'Asia/Ho_Chi_Minh',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });

    this.logger.log(
      `üîÑ [Database Cleanup Cron] B·∫Øt ƒë·∫ßu x√≥a database_change_log theo batch l√∫c ${vietnamTime}`,
    );

    try {
      // ƒê·∫øm s·ªë b·∫£n ghi tr∆∞·ªõc khi x√≥a ƒë·ªÉ log
      const countBefore = await this.changeLogRepository.count();
      
      if (countBefore === 0) {
        this.logger.log(
          '‚ÑπÔ∏è [Database Cleanup Cron] B·∫£ng database_change_log ƒë√£ tr·ªëng, kh√¥ng c√≥ g√¨ ƒë·ªÉ x√≥a',
        );
        return;
      }

      this.logger.log(
        `üìä [Database Cleanup Cron] T√¨m th·∫•y ${countBefore} b·∫£n ghi trong database_change_log`,
      );

      // X√≥a theo batch ƒë·ªÉ tr√°nh t·∫£i n·∫∑ng
      const result = await this.clearDatabaseChangeLogInBatches();

      this.logger.log(
        `‚úÖ [Database Cleanup Cron] ƒê√£ x√≥a th√†nh c√¥ng ${result.totalDeleted} b·∫£n ghi t·ª´ database_change_log trong ${result.batches} batch`,
      );
      this.logger.log(
        `üïê [Database Cleanup Cron] Th·ªùi gian ho√†n th√†nh: ${vietnamTime}`,
      );
    } catch (error) {
      this.logger.error(
        '‚ùå [Database Cleanup Cron] L·ªói khi x√≥a database_change_log:',
        error.stack,
      );
    }
  }

  /**
   * X√≥a database_change_log theo batch ƒë·ªÉ tr√°nh t·∫£i n·∫∑ng cho database
   * @param batchSize K√≠ch th∆∞·ªõc m·ªói batch (m·∫∑c ƒë·ªãnh 1000)
   * @param maxBatches S·ªë batch t·ªëi ƒëa ƒë·ªÉ tr√°nh ch·∫°y qu√° l√¢u (m·∫∑c ƒë·ªãnh 100)
   */
  private async clearDatabaseChangeLogInBatches(
    batchSize: number = 1000,
    maxBatches: number = 100,
  ): Promise<{ totalDeleted: number; batches: number }> {
    let totalDeleted = 0;
    let batches = 0;
    let hasMoreData = true;

    this.logger.log(
      `üì¶ [Batch Delete] B·∫Øt ƒë·∫ßu x√≥a theo batch - K√≠ch th∆∞·ªõc: ${batchSize}, T·ªëi ƒëa: ${maxBatches} batch`,
    );

    while (hasMoreData && batches < maxBatches) {
      try {
        // L·∫•y ID c·ªßa c√°c b·∫£n ghi c≈© nh·∫•t ƒë·ªÉ x√≥a
        const recordsToDelete = await this.changeLogRepository
          .createQueryBuilder('log')
          .select('log.id')
          .orderBy('log.triggered_at', 'ASC') // X√≥a t·ª´ c≈© nh·∫•t
          .limit(batchSize)
          .getMany();

        if (recordsToDelete.length === 0) {
          hasMoreData = false;
          this.logger.log('üì¶ [Batch Delete] Kh√¥ng c√≤n b·∫£n ghi n√†o ƒë·ªÉ x√≥a');
          break;
        }

        const idsToDelete = recordsToDelete.map(record => record.id);

        // X√≥a batch hi·ªán t·∫°i
        const deleteResult = await this.changeLogRepository
          .createQueryBuilder()
          .delete()
          .where('id IN (:...ids)', { ids: idsToDelete })
          .execute();

        const deletedInThisBatch = deleteResult.affected || 0;
        totalDeleted += deletedInThisBatch;
        batches++;

        this.logger.log(
          `üì¶ [Batch Delete] Batch ${batches}: ƒê√£ x√≥a ${deletedInThisBatch} b·∫£n ghi (T·ªïng: ${totalDeleted})`,
        );

        // N·∫øu s·ªë b·∫£n ghi x√≥a √≠t h∆°n batchSize th√¨ ƒë√£ h·∫øt d·ªØ li·ªáu
        if (deletedInThisBatch < batchSize) {
          hasMoreData = false;
          this.logger.log('üì¶ [Batch Delete] ƒê√£ x√≥a h·∫øt d·ªØ li·ªáu');
        }

        // Ngh·ªâ ng·∫Øn gi·ªØa c√°c batch ƒë·ªÉ gi·∫£m t·∫£i cho database
        if (hasMoreData && batches < maxBatches) {
          await new Promise(resolve => setTimeout(resolve, 100)); // Ngh·ªâ 100ms
        }
      } catch (error) {
        this.logger.error(
          `‚ùå [Batch Delete] L·ªói trong batch ${batches + 1}:`,
          error.stack,
        );
        throw error;
      }
    }

    if (batches >= maxBatches) {
      this.logger.warn(
        `‚ö†Ô∏è [Batch Delete] ƒê√£ ƒë·∫°t gi·ªõi h·∫°n ${maxBatches} batch, c√≥ th·ªÉ c√≤n d·ªØ li·ªáu ch∆∞a x√≥a`,
      );
    }

    this.logger.log(
      `üì¶ [Batch Delete] Ho√†n th√†nh: ${totalDeleted} b·∫£n ghi trong ${batches} batch`,
    );

    return { totalDeleted, batches };
  }

  /**
   * Method ƒë·ªÉ ch·∫°y th·ªß c√¥ng - c√≥ th·ªÉ g·ªçi t·ª´ controller ho·∫∑c test
   */
  async clearDatabaseChangeLogManual(
    batchSize?: number,
    maxBatches?: number,
  ): Promise<{
    success: boolean;
    deletedCount: number;
    batches: number;
    message: string;
    executionTime: number;
  }> {
    const startTime = new Date();
    const vietnamTime = new Date().toLocaleString('vi-VN', {
      timeZone: 'Asia/Ho_Chi_Minh',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });

    this.logger.log(
      `üîß [Manual Database Cleanup] B·∫Øt ƒë·∫ßu x√≥a database_change_log th·ªß c√¥ng l√∫c ${vietnamTime}`,
    );

    try {
      // ƒê·∫øm s·ªë b·∫£n ghi tr∆∞·ªõc khi x√≥a
      const countBefore = await this.changeLogRepository.count();
      
      if (countBefore === 0) {
        const endTime = new Date();
        const executionTime = endTime.getTime() - startTime.getTime();
        
        return {
          success: true,
          deletedCount: 0,
          batches: 0,
          message: 'B·∫£ng database_change_log ƒë√£ tr·ªëng, kh√¥ng c√≥ g√¨ ƒë·ªÉ x√≥a',
          executionTime,
        };
      }

      // X√≥a theo batch
      const result = await this.clearDatabaseChangeLogInBatches(
        batchSize || 1000,
        maxBatches || 100,
      );

      const endTime = new Date();
      const executionTime = endTime.getTime() - startTime.getTime();

      this.logger.log(
        `‚úÖ [Manual Database Cleanup] ƒê√£ x√≥a th√†nh c√¥ng ${result.totalDeleted} b·∫£n ghi trong ${result.batches} batch`,
      );

      return {
        success: true,
        deletedCount: result.totalDeleted,
        batches: result.batches,
        message: `ƒê√£ x√≥a th√†nh c√¥ng ${result.totalDeleted} b·∫£n ghi t·ª´ database_change_log trong ${result.batches} batch`,
        executionTime,
      };
    } catch (error) {
      const endTime = new Date();
      const executionTime = endTime.getTime() - startTime.getTime();

      this.logger.error(
        '‚ùå [Manual Database Cleanup] L·ªói khi x√≥a database_change_log:',
        error.stack,
      );

      return {
        success: false,
        deletedCount: 0,
        batches: 0,
        message: `L·ªói khi x√≥a database_change_log: ${error.message}`,
        executionTime,
      };
    }
  }

  /**
   * Method ƒë·ªÉ l·∫•y th√¥ng tin tr·∫°ng th√°i b·∫£ng database_change_log
   */
  async getDatabaseChangeLogStatus(): Promise<{
    totalRecords: number;
    processedRecords: number;
    unprocessedRecords: number;
    oldestRecord: Date | null;
    newestRecord: Date | null;
  }> {
    try {
      const totalRecords = await this.changeLogRepository.count();
      const processedRecords = await this.changeLogRepository.count({
        where: { processed: true },
      });
      const unprocessedRecords = totalRecords - processedRecords;

      // L·∫•y b·∫£n ghi c≈© nh·∫•t v√† m·ªõi nh·∫•t
      const oldestRecord = await this.changeLogRepository
        .createQueryBuilder('log')
        .select('MIN(log.triggered_at)', 'oldest')
        .getRawOne();

      const newestRecord = await this.changeLogRepository
        .createQueryBuilder('log')
        .select('MAX(log.triggered_at)', 'newest')
        .getRawOne();

      return {
        totalRecords,
        processedRecords,
        unprocessedRecords,
        oldestRecord: oldestRecord?.oldest || null,
        newestRecord: newestRecord?.newest || null,
      };
    } catch (error) {
      this.logger.error(
        '‚ùå [Database Status] L·ªói khi l·∫•y th√¥ng tin database_change_log:',
        error.stack,
      );
      throw error;
    }
  }
}
