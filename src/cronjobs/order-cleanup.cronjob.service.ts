import { Injectable } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, IsNull } from 'typeorm';
import {
  ExtendReason,
  OrderDetail,
} from '../order-details/order-detail.entity';
import { SystemConfig } from '../system_config/system_config.entity';
import { WinstonLogger } from '../common/winston.logger';

@Injectable()
export class OrderCleanupCronjobService {
  private readonly logger = new WinstonLogger(OrderCleanupCronjobService.name);

  constructor(
    @InjectRepository(OrderDetail)
    private orderDetailRepository: Repository<OrderDetail>,
    @InjectRepository(SystemConfig)
    private systemConfigRepository: Repository<SystemConfig>,
  ) {}

  // ‚úÖ S·ª¨A: Ch·∫°y M·ªåI NG√ÄY ƒë·ªÉ c√≥ th·ªÉ check v√† x·ª≠ l√Ω (0 = Ch·ªß nh·∫≠t, 1-6 = Th·ª© 2-7)
  @Cron(process.env.CRON_ORDER_CLEANUP_TIME || '00 01 * * *')
  async cleanupExpiredOrderDetails() {
    const executionStartTime = new Date();
    try {
      this.logger.log('=== B·∫Øt ƒë·∫ßu cronjob ki·ªÉm tra order details ===');
      this.logger.log(
        `üïê Th·ªùi gian th·ª±c hi·ªán: ${this.formatDateTime(executionStartTime)}`,
      );
      this.logger.log(
        `üìÖ Ng√†y hi·ªán t·∫°i: ${this.formatDate(executionStartTime)}`,
      );

      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ch·∫°y
      const canRun = await this.canRunToday();

      if (!canRun) {
        // KH√îNG ƒë∆∞·ª£c ph√©p ch·∫°y cleanup ‚Üí Gia h·∫°n extended
        this.logger.log(
          '‚ùå Kh√¥ng ƒë∆∞·ª£c ph√©p ch·∫°y cleanup h√¥m nay ‚Üí Gia h·∫°n extended',
        );
        await this.extendAllActiveOrderDetails();
        this.logger.log('‚úÖ ƒê√£ ho√†n th√†nh gia h·∫°n extended thay th·∫ø');
      } else {
        // ƒê∆Ø·ª¢C ph√©p ch·∫°y cleanup ‚Üí X·ª≠ l√Ω b√¨nh th∆∞·ªùng
        this.logger.log('‚úÖ ƒê∆∞·ª£c ph√©p ch·∫°y cleanup h√¥m nay');

        const orderDetails = await this.getActiveOrderDetails();
        this.logger.log(
          `üì¶ T√¨m th·∫•y ${orderDetails.length} order details c·∫ßn ki·ªÉm tra`,
        );

        const expiredIds = this.calculateExpiredOrderDetails(orderDetails);

        if (expiredIds.length > 0) {
          await this.softHideOrderDetails(expiredIds);
          this.logger.log(`‚úÖ ƒê√£ ·∫©n ${expiredIds.length} order details`);
        } else {
          this.logger.log('‚úÖ Kh√¥ng c√≥ order detail n√†o c·∫ßn ·∫©n');
        }
      }

      const executionEndTime = new Date();
      const executionTime =
        executionEndTime.getTime() - executionStartTime.getTime();
      this.logger.log(`‚è±Ô∏è Th·ªùi gian th·ª±c hi·ªán: ${executionTime}ms`);
      this.logger.log('=== K·∫øt th√∫c cronjob ===');
    } catch (error) {
      this.logger.error(
        '‚ùå L·ªói trong qu√° tr√¨nh th·ª±c hi·ªán cronjob:',
        error.stack,
      );
      throw error;
    }
  }

  /**
   * ‚úÖ TH√äM M·ªöI: Gia h·∫°n extended cho t·∫•t c·∫£ order details khi kh√¥ng ch·∫°y ƒë∆∞·ª£c
   * Logic: Khi cronjob kh√¥ng ch·∫°y (ng√†y ngh·ªâ/ch·ªß nh·∫≠t) th√¨ gia h·∫°n th√™m 1 ng√†y
   */
  private async extendAllActiveOrderDetails(): Promise<void> {
    try {
      this.logger.log('üÜô === B·∫ÆT ƒê·∫¶U GIA H·∫†N EXTENDED CHO T·∫§T C·∫¢ ƒê∆†N ===');

      // L·∫•y danh s√°ch order details active
      const orderDetails = await this.getActiveOrderDetails();

      if (orderDetails.length === 0) {
        this.logger.log('üì¶ Kh√¥ng c√≥ order detail n√†o ƒë·ªÉ gia h·∫°n');
        return;
      }

      this.logger.log(
        `üì¶ T√¨m th·∫•y ${orderDetails.length} order details c·∫ßn gia h·∫°n`,
      );

      // Log chi ti·∫øt tr∆∞·ªõc khi update
      for (const orderDetail of orderDetails) {
        const currentExtended = orderDetail.extended || 4;
        const newExtended = currentExtended + 1;
        this.logger.log(
          `üìã Order Detail ID ${orderDetail.id}: ${currentExtended} ‚Üí ${newExtended} ng√†y`,
        );
      }

      // C·∫≠p nh·∫≠t extended: TƒÉng l√™n 1 ho·∫∑c set = 5 n·∫øu null
      const updateResult = await this.orderDetailRepository
        .createQueryBuilder()
        .update(OrderDetail)
        .set({
          extended: () => 'COALESCE(extended, 4) + 1',
          extend_reason: ExtendReason.SYSTEM_SUNDAY_AUTO,
        })
        .where('deleted_at IS NULL')
        .andWhere('hidden_at IS NULL')
        .execute();

      this.logger.log(
        `‚úÖ ƒê√£ gia h·∫°n extended cho ${updateResult.affected} order details`,
      );
      this.logger.log(
        `üïê Th·ªùi gian gia h·∫°n: ${this.formatDateTime(new Date())}`,
      );
      this.logger.log('üÜô === K·∫æT TH√öC GIA H·∫†N EXTENDED ===');
    } catch (error) {
      this.logger.error('‚ùå L·ªói khi gia h·∫°n extended:', error.stack);
      throw error;
    }
  }

  /**
   * Format datetime ƒë·ªÉ hi·ªÉn th·ªã r√µ r√†ng
   */
  private formatDateTime(date: Date): string {
    return date.toLocaleString('vi-VN', {
      timeZone: 'Asia/Ho_Chi_Minh',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });
  }

  /**
   * Format date ƒë·ªÉ hi·ªÉn th·ªã ng√†y th√°ng
   */
  private formatDate(date: Date): string {
    return date.toLocaleDateString('vi-VN', {
      timeZone: 'Asia/Ho_Chi_Minh',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
    });
  }

  /**
   * ‚úÖ S·ª¨A L·∫†I: Ki·ªÉm tra xem c√≥ ƒë∆∞·ª£c ph√©p ch·∫°y cronjob h√¥m nay kh√¥ng
   * Logic ƒë√∫ng: Ch·ªß nh·∫≠t + Ng√†y ngh·ªâ
   */
  private async canRunToday(): Promise<boolean> {
    try {
      const today = new Date();
      // S·ª≠ d·ª•ng timezone VN ƒë·ªìng nh·∫•t
      const todayStr = today.toLocaleDateString('en-CA', {
        timeZone: 'Asia/Ho_Chi_Minh',
      }); // Format: YYYY-MM-DD
      const dayOfWeek = today.getDay(); // 0 = Ch·ªß nh·∫≠t, 1 = Th·ª© 2, ..., 6 = Th·ª© 7

      this.logger.log(
        `üîç Ki·ªÉm tra ƒëi·ªÅu ki·ªán ch·∫°y cho ng√†y: ${todayStr} (${this.formatDate(today)})`,
      );
      this.logger.log(
        `üìÖ Th·ª© trong tu·∫ßn: ${this.getDayOfWeekName(dayOfWeek)} (${dayOfWeek})`,
      );

      // 1. Ki·ªÉm tra ch·ªß nh·∫≠t
      if (dayOfWeek === 0) {
        this.logger.log('üö´ H√¥m nay l√† ch·ªß nh·∫≠t - ki·ªÉm tra c·∫•u h√¨nh');

        const allowSundayRun = await this.isSundayRunAllowed();
        if (!allowSundayRun) {
          this.logger.log(
            '‚ùå Kh√¥ng ƒë∆∞·ª£c ph√©p ch·∫°y v√†o ch·ªß nh·∫≠t - s·∫Ω gia h·∫°n thay th·∫ø',
          );
          return false;
        }
        this.logger.log('‚úÖ ƒê∆∞·ª£c c·∫•u h√¨nh cho ph√©p ch·∫°y ch·ªß nh·∫≠t');
      }

      // 2. ‚úÖ S·ª¨A L·∫†I: Ki·ªÉm tra ng√†y ngh·ªâ v·ªõi logic ƒë√∫ng
      // B∆∞·ªõc 1: Ki·ªÉm tra c·∫•u h√¨nh t·ªïng quan tr∆∞·ªõc
      const allowHolidayRun = await this.isHolidayRunAllowed();
      this.logger.log(
        `‚öôÔ∏è C·∫•u h√¨nh t·ªïng quan cho ph√©p ch·∫°y ng√†y ngh·ªâ: ${allowHolidayRun ? 'C√≥' : 'Kh√¥ng'}`,
      );

      if (!allowHolidayRun) {
        // system_scheduleHoliday = '0' ‚Üí CH·∫∂N HO√ÄN TO√ÄN
        this.logger.log(
          '‚ùå Kh√¥ng th·ªÉ ch·∫°y: system_scheduleHoliday = 0 (ch·∫∑n ho√†n to√†n ng√†y ngh·ªâ) - s·∫Ω gia h·∫°n thay th·∫ø',
        );
        return false;
      }

      // B∆∞·ªõc 2: N·∫øu allowHolidayRun = true (system_scheduleHoliday = '1')
      // ‚Üí Ki·ªÉm tra chi ti·∫øt xem h√¥m nay c√≥ trong danh s√°ch l·ªãch ngh·ªâ kh√¥ng
      const isHoliday = await this.isTodayHoliday();
      this.logger.log(
        `üèñÔ∏è H√¥m nay c√≥ ph·∫£i ng√†y ngh·ªâ c·ª• th·ªÉ: ${isHoliday ? 'C√≥' : 'Kh√¥ng'}`,
      );

      if (isHoliday) {
        this.logger.log(
          '‚ùå Kh√¥ng th·ªÉ ch·∫°y: H√¥m nay c√≥ trong danh s√°ch l·ªãch ngh·ªâ c·ª• th·ªÉ - s·∫Ω gia h·∫°n thay th·∫ø',
        );
        return false;
      }

      this.logger.log('‚úÖ ƒê∆∞·ª£c ph√©p ch·∫°y cronjob cleanup');
      return true;
    } catch (error) {
      this.logger.error(
        '‚ùå L·ªói khi ki·ªÉm tra ƒëi·ªÅu ki·ªán ch·∫°y cronjob - M·∫∂C ƒê·ªäNH CH·∫∂N ƒë·ªÉ an to√†n:',
        error.stack,
      );
      // Fail-safe: C√≥ l·ªói th√¨ kh√¥ng ch·∫°y ƒë·ªÉ an to√†n
      return false;
    }
  }

  /**
   * L·∫•y t√™n th·ª© trong tu·∫ßn
   */
  private getDayOfWeekName(dayOfWeek: number): string {
    const days = [
      'Ch·ªß nh·∫≠t',
      'Th·ª© 2',
      'Th·ª© 3',
      'Th·ª© 4',
      'Th·ª© 5',
      'Th·ª© 6',
      'Th·ª© 7',
    ];
    return days[dayOfWeek];
  }

  /**
   * Ki·ªÉm tra c·∫•u h√¨nh c√≥ cho ph√©p ch·∫°y v√†o ch·ªß nh·∫≠t kh√¥ng
   */
  private async isSundayRunAllowed(): Promise<boolean> {
    try {
      const config = await this.systemConfigRepository.findOne({
        where: { name: 'system_scheduleSunday' },
      });

      const result = config?.value === '1';
      this.logger.log(
        `üìã system_scheduleSunday: ${config?.value || 'null'} ‚Üí ${result ? 'Cho ph√©p' : 'Kh√¥ng cho ph√©p'}`,
      );

      return result;
    } catch (error) {
      this.logger.error(
        '‚ùå L·ªói ki·ªÉm tra system_scheduleSunday:',
        error.message,
      );
      return false; // Fail-safe
    }
  }

  /**
   * ‚úÖ S·ª¨A L·∫†I: Ki·ªÉm tra c·∫•u h√¨nh c√≥ cho ph√©p ch·∫°y v√†o ng√†y ngh·ªâ kh√¥ng
   * Logic: 0 = Ch·∫∑n ho√†n to√†n, 1 = Cho ph√©p nh∆∞ng check th√™m danh s√°ch c·ª• th·ªÉ
   */
  private async isHolidayRunAllowed(): Promise<boolean> {
    try {
      const config = await this.systemConfigRepository.findOne({
        where: { name: 'system_scheduleHoliday' },
      });

      const result = config?.value === '1';
      this.logger.log(
        `üìã system_scheduleHoliday: ${config?.value || 'null'} ‚Üí ${result ? 'Cho ph√©p ki·ªÉm tra chi ti·∫øt' : 'Ch·∫∑n ho√†n to√†n'}`,
      );

      return result;
    } catch (error) {
      this.logger.error(
        '‚ùå L·ªói ki·ªÉm tra system_scheduleHoliday:',
        error.message,
      );
      return false; // Fail-safe
    }
  }

  /**
   * ‚úÖ S·ª¨A L·∫†I: Ki·ªÉm tra h√¥m nay c√≥ ph·∫£i ng√†y ngh·ªâ kh√¥ng (timezone ƒë·ªìng nh·∫•t)
   */
  private async isTodayHoliday(): Promise<boolean> {
    try {
      // S·ª≠ d·ª•ng timezone VN ƒë·ªìng nh·∫•t
      const today = new Date().toLocaleDateString('en-CA', {
        timeZone: 'Asia/Ho_Chi_Minh',
      }); // Format: YYYY-MM-DD

      this.logger.log(`üìÖ Ki·ªÉm tra ng√†y ngh·ªâ cho: ${today} (VN timezone)`);

      const holidayConfigs = await this.systemConfigRepository.find({
        where: [
          { name: 'holiday_multi_days' },
          { name: 'holiday_single_day' },
          { name: 'holiday_separated_days' },
        ],
      });

      this.logger.log(
        `üìã T√¨m th·∫•y ${holidayConfigs.length} c·∫•u h√¨nh ng√†y ngh·ªâ`,
      );

      for (const config of holidayConfigs) {
        if (!config.value) {
          this.logger.log(`‚ö†Ô∏è ${config.name}: Kh√¥ng c√≥ gi√° tr·ªã`);
          continue;
        }

        try {
          const holidays = JSON.parse(config.value);
          this.logger.log(
            `üìã ${config.name}: ${holidays.length} nh√≥m ng√†y ngh·ªâ`,
          );

          for (const holiday of holidays) {
            if (holiday.dates?.includes(today)) {
              this.logger.log(
                `üèñÔ∏è T√¨m th·∫•y ng√†y ngh·ªâ: ${today} - ${holiday.reason}`,
              );
              return true;
            }
          }
        } catch (parseError) {
          this.logger.error(
            `‚ùå L·ªói parse JSON cho ${config.name}:`,
            parseError.message,
          );
        }
      }

      this.logger.log(`‚úÖ ${today} kh√¥ng ph·∫£i ng√†y ngh·ªâ c·ª• th·ªÉ`);
      return false;
    } catch (error) {
      this.logger.error('‚ùå L·ªói ki·ªÉm tra ng√†y ngh·ªâ:', error.message);
      return true; // Fail-safe: C√≥ l·ªói th√¨ coi nh∆∞ ng√†y ngh·ªâ ƒë·ªÉ kh√¥ng ch·∫°y
    }
  }

  /**
   * L·∫•y danh s√°ch order_detail ch∆∞a b·ªã x√≥a m·ªÅm
   */
  private async getActiveOrderDetails(): Promise<OrderDetail[]> {
    const result = await this.orderDetailRepository.find({
      where: {
        deleted_at: IsNull(),
        hidden_at: IsNull(),
      },
      select: ['id', 'created_at', 'extended'],
      order: { created_at: 'ASC' }, // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o
    });

    this.logger.log(`üì¶ Query k·∫øt qu·∫£: ${result.length} order details active`);
    return result;
  }

  /**
   * ‚úÖ S·ª¨A L·∫†I: T√≠nh to√°n extended ch√≠nh x√°c theo s·ªë ng√†y th·ª±c t·∫ø
   * C√¥ng th·ª©c m·ªõi: T√≠nh s·ªë ng√†y ƒë√£ tr√¥i qua k·ªÉ t·ª´ khi t·∫°o
   */
  private calculateExpiredOrderDetails(orderDetails: OrderDetail[]): number[] {
    const currentDate = new Date();

    // Chu·∫©n h√≥a v·ªÅ ƒë·∫ßu ng√†y ƒë·ªÉ so s√°nh ch√≠nh x√°c (00:00:00)
    const currentDateOnly = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      currentDate.getDate(),
    );

    this.logger.log(`üî¢ === B·∫ÆT ƒê·∫¶U T√çNH TO√ÅN EXTENDED M·ªöI ===`);
    this.logger.log(`üìÖ Ng√†y hi·ªán t·∫°i: ${this.formatDate(currentDate)}`);
    this.logger.log(
      `üî¢ Timestamp hi·ªán t·∫°i (ƒë·∫ßu ng√†y): ${currentDateOnly.getTime()}`,
    );

    const expiredIds: number[] = [];

    for (const orderDetail of orderDetails) {
      try {
        const createdDate = new Date(orderDetail.created_at);

        // Chu·∫©n h√≥a created_at v·ªÅ ƒë·∫ßu ng√†y
        const createdDateOnly = new Date(
          createdDate.getFullYear(),
          createdDate.getMonth(),
          createdDate.getDate(),
        );

        const extended = orderDetail.extended || 4; // Default 4 n·∫øu null/undefined

        // T√≠nh s·ªë ng√†y ƒë√£ tr√¥i qua (d∆∞∆°ng s·ªë)
        const daysDifference = Math.floor(
          (currentDateOnly.getTime() - createdDateOnly.getTime()) /
            (1000 * 60 * 60 * 24),
        );

        // Logic m·ªõi: N·∫øu s·ªë ng√†y ƒë√£ qua >= extended th√¨ h·∫øt h·∫°n
        const isExpired = daysDifference >= extended;
        const remainingDays = extended - daysDifference;

        this.logger.log(`üìã Order Detail ID ${orderDetail.id}:`);
        this.logger.log(
          `   üìÖ Created at: ${this.formatDateTime(orderDetail.created_at)}`,
        );
        this.logger.log(
          `   üìÖ Created date (chu·∫©n h√≥a): ${this.formatDate(createdDateOnly)}`,
        );
        this.logger.log(`   ‚è∞ Extended: ${extended} ng√†y`);
        this.logger.log(`   üìä ƒê√£ t·ªìn t·∫°i: ${daysDifference} ng√†y`);
        this.logger.log(
          `   üßÆ So s√°nh: ${daysDifference} >= ${extended} ‚Üí ${isExpired ? 'H·∫æT H·∫†N' : 'C√íN H·∫†N'}`,
        );

        if (isExpired) {
          expiredIds.push(orderDetail.id);
          this.logger.log(`   ‚ùå K·∫øt qu·∫£: H·∫æT H·∫†N ‚Üí S·∫º X√ìA M·ªÄM`);
        } else {
          this.logger.log(
            `   ‚úÖ K·∫øt qu·∫£: C√íN H·∫†N ‚Üí GI·ªÆ L·∫†I (c√≤n ${remainingDays} ng√†y)`,
          );
        }
        this.logger.log(`   ---`);
      } catch (error) {
        this.logger.error(
          `‚ùå L·ªói khi x·ª≠ l√Ω Order Detail ID ${orderDetail.id}:`,
          error.message,
        );
      }
    }

    this.logger.log(`üî¢ === K·∫æT QU·∫¢ T√çNH TO√ÅN EXTENDED ===`);
    this.logger.log(
      `üìä T·ªïng s·ªë order details ki·ªÉm tra: ${orderDetails.length}`,
    );
    this.logger.log(`‚ùå S·ªë l∆∞·ª£ng h·∫øt h·∫°n c·∫ßn x√≥a: ${expiredIds.length}`);
    this.logger.log(
      `‚úÖ S·ªë l∆∞·ª£ng c√≤n hi·ªáu l·ª±c: ${orderDetails.length - expiredIds.length}`,
    );

    if (expiredIds.length > 0) {
      this.logger.log(`üóëÔ∏è Danh s√°ch ID s·∫Ω x√≥a m·ªÅm: [${expiredIds.join(', ')}]`);
    }

    return expiredIds;
  }

  /**
   * Th·ª±c hi·ªán x√≥a m·ªÅm c√°c order_detail theo batch
   */
  private async softHideOrderDetails(ids: number[]): Promise<void> {
    const time = new Date();
    const reason = 'H·ªá Th·ªëng ·∫®n T·ª± ƒê·ªông';
    const BATCH_SIZE = 1000; // Batch size ƒë·ªÉ tr√°nh query qu√° l·ªõn
    
    this.logger.log(`üîÑ B·∫Øt ƒë·∫ßu ·∫©n ${ids.length} order details theo batch t·∫°i: ${this.formatDateTime(time)}`);
    
    if (ids.length === 0) {
      this.logger.log('‚ö†Ô∏è Kh√¥ng c√≥ ID n√†o ƒë·ªÉ ·∫©n');
      return;
    }

    let totalAffected = 0;
    const batches = this.chunkArray(ids, BATCH_SIZE);
    
    this.logger.log(`üìä Chia th√†nh ${batches.length} batch(es), m·ªói batch t·ªëi ƒëa ${BATCH_SIZE} items`);

    for (let i = 0; i < batches.length; i++) {
      const batch = batches[i];
      this.logger.log(`üîÑ ƒêang x·ª≠ l√Ω batch ${i + 1}/${batches.length} v·ªõi ${batch.length} IDs`);
      
      try {
        const result = await this.orderDetailRepository
          .createQueryBuilder()
          .update(OrderDetail)
          .set({ hidden_at: time, reason })
          .where('id IN (:...ids)', { ids: batch })
          .andWhere('deleted_at IS NULL')
          .execute();

        totalAffected += result.affected || 0;
        
        this.logger.log(`‚úÖ Batch ${i + 1}: ƒê√£ c·∫≠p nh·∫≠t hidden_at cho ${result.affected} records`);
        this.logger.log(`üìã Batch ${i + 1} IDs: [${batch.join(', ')}]`);
        
        // Th√™m delay nh·ªè gi·ªØa c√°c batch ƒë·ªÉ tr√°nh overload database
        if (i < batches.length - 1) {
          await this.delay(1000); // 1000ms delay
        }
        
      } catch (error) {
        this.logger.error(`‚ùå L·ªói khi x·ª≠ l√Ω batch ${i + 1}:`, error.message);
        throw error; // Re-throw ƒë·ªÉ kh√¥ng b·ªè qua l·ªói
      }
    }

    this.logger.log(`‚úÖ T·ªîNG K·∫æT: ƒê√£ c·∫≠p nh·∫≠t hidden_at cho ${totalAffected}/${ids.length} records`);
    this.logger.log(`üïê Ho√†n th√†nh t·∫°i: ${this.formatDateTime(new Date())}`);
  }

  /**
   * Utility function ƒë·ªÉ chia array th√†nh c√°c chunk nh·ªè h∆°n
   */
  private chunkArray<T>(array: T[], size: number): T[][] {
    const chunks: T[][] = [];
    for (let i = 0; i < array.length; i += size) {
      chunks.push(array.slice(i, i + size));
    }
    return chunks;
  }

  /**
   * Utility function ƒë·ªÉ delay gi·ªØa c√°c batch
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}
