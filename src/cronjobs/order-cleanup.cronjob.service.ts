import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, IsNull } from 'typeorm';
import { OrderDetail } from '../order-details/order-detail.entity';
import { SystemConfig } from '../system_config/system_config.entity';

@Injectable()
export class OrderCleanupCronjobService {
  private readonly logger = new Logger(OrderCleanupCronjobService.name);

  constructor(
    @InjectRepository(OrderDetail)
    private orderDetailRepository: Repository<OrderDetail>,
    @InjectRepository(SystemConfig)
    private systemConfigRepository: Repository<SystemConfig>,
  ) {}

  // Ch·∫°y l√∫c 18:28 t·ª´ th·ª© 2 ƒë·∫øn th·ª© 7 (kh√¥ng ch·∫°y ch·ªß nh·∫≠t)
  @Cron('00 01 * * 1-6')
  async cleanupExpiredOrderDetails() {
    const executionStartTime = new Date();
    try {
      this.logger.log('=== B·∫Øt ƒë·∫ßu cronjob x√≥a m·ªÅm order details h·∫øt h·∫°n ===');
      this.logger.log(`üïê Th·ªùi gian th·ª±c hi·ªán: ${this.formatDateTime(executionStartTime)}`);
      this.logger.log(`üìÖ Ng√†y hi·ªán t·∫°i: ${this.formatDate(executionStartTime)}`);

      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ch·∫°y (ng√†y ngh·ªâ + ch·ªß nh·∫≠t)
      const canRun = await this.canRunToday();
      if (!canRun) {
        this.logger.log('‚ùå Cronjob kh√¥ng ƒë∆∞·ª£c ph√©p ch·∫°y h√¥m nay');
        return;
      }

      // L·∫•y danh s√°ch order_detail c·∫ßn x·ª≠ l√Ω
      const orderDetails = await this.getActiveOrderDetails();
      this.logger.log(`üì¶ T√¨m th·∫•y ${orderDetails.length} order details c·∫ßn ki·ªÉm tra`);

      // X·ª≠ l√Ω t·ª´ng order detail v·ªõi c√¥ng th·ª©c m·ªõi
      const expiredIds = this.calculateExpiredOrderDetails(orderDetails);
      
      if (expiredIds.length > 0) {
        await this.softDeleteOrderDetails(expiredIds);
        this.logger.log(`‚úÖ ƒê√£ x√≥a m·ªÅm ${expiredIds.length} order details`);
      } else {
        this.logger.log('‚úÖ Kh√¥ng c√≥ order detail n√†o c·∫ßn x√≥a m·ªÅm');
      }

      const executionEndTime = new Date();
      const executionTime = executionEndTime.getTime() - executionStartTime.getTime();
      this.logger.log(`‚è±Ô∏è Th·ªùi gian th·ª±c hi·ªán: ${executionTime}ms`);
      this.logger.log('=== K·∫øt th√∫c cronjob x√≥a m·ªÅm order details ===');

    } catch (error) {
      this.logger.error('‚ùå L·ªói trong qu√° tr√¨nh th·ª±c hi·ªán cronjob:', error.stack);
      throw error;
    }
  }

  /**
   * Format datetime ƒë·ªÉ hi·ªÉn th·ªã r√µ r√†ng
   */
  private formatDateTime(date: Date): string {
    return date.toLocaleString('vi-VN', {
      timeZone: 'Asia/Ho_Chi_Minh',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  }

  /**
   * Format date ƒë·ªÉ hi·ªÉn th·ªã ng√†y th√°ng
   */
  private formatDate(date: Date): string {
    return date.toLocaleDateString('vi-VN', {
      timeZone: 'Asia/Ho_Chi_Minh',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });
  }

  /**
   * ‚úÖ S·ª¨A L·∫†I: Ki·ªÉm tra xem c√≥ ƒë∆∞·ª£c ph√©p ch·∫°y cronjob h√¥m nay kh√¥ng
   * Logic ƒë√∫ng: Ch·ªß nh·∫≠t + Ng√†y ngh·ªâ
   */
  private async canRunToday(): Promise<boolean> {
    try {
      const today = new Date();
      // S·ª≠ d·ª•ng timezone VN ƒë·ªìng nh·∫•t
      const todayStr = today.toLocaleDateString('en-CA', {
        timeZone: 'Asia/Ho_Chi_Minh'
      }); // Format: YYYY-MM-DD
      const dayOfWeek = today.getDay(); // 0 = Ch·ªß nh·∫≠t, 1 = Th·ª© 2, ..., 6 = Th·ª© 7
      
      this.logger.log(`üîç Ki·ªÉm tra ƒëi·ªÅu ki·ªán ch·∫°y cho ng√†y: ${todayStr} (${this.formatDate(today)})`);
      this.logger.log(`üìÖ Th·ª© trong tu·∫ßn: ${this.getDayOfWeekName(dayOfWeek)} (${dayOfWeek})`);

      // 1. Ki·ªÉm tra ch·ªß nh·∫≠t
      if (dayOfWeek === 0) {
        this.logger.log('üö´ H√¥m nay l√† ch·ªß nh·∫≠t - cronjob ƒë∆∞·ª£c c·∫•u h√¨nh kh√¥ng ch·∫°y ch·ªß nh·∫≠t');
        
        const allowSundayRun = await this.isSundayRunAllowed();
        if (!allowSundayRun) {
          this.logger.log('‚ùå Kh√¥ng ƒë∆∞·ª£c ph√©p ch·∫°y v√†o ch·ªß nh·∫≠t');
          return false;
        }
        this.logger.log('‚úÖ ƒê∆∞·ª£c c·∫•u h√¨nh cho ph√©p ch·∫°y ch·ªß nh·∫≠t');
      }

      // 2. ‚úÖ S·ª¨A L·∫†I: Ki·ªÉm tra ng√†y ngh·ªâ v·ªõi logic ƒë√∫ng
      // B∆∞·ªõc 1: Ki·ªÉm tra c·∫•u h√¨nh t·ªïng quan tr∆∞·ªõc
      const allowHolidayRun = await this.isHolidayRunAllowed();
      this.logger.log(`‚öôÔ∏è C·∫•u h√¨nh t·ªïng quan cho ph√©p ch·∫°y ng√†y ngh·ªâ: ${allowHolidayRun ? 'C√≥' : 'Kh√¥ng'}`);
      
      if (!allowHolidayRun) {
        // system_scheduleHoliday = '0' ‚Üí CH·∫∂N HO√ÄN TO√ÄN
        this.logger.log('‚ùå Kh√¥ng th·ªÉ ch·∫°y: system_scheduleHoliday = 0 (ch·∫∑n ho√†n to√†n ng√†y ngh·ªâ)');
        return false;
      }

      // B∆∞·ªõc 2: N·∫øu allowHolidayRun = true (system_scheduleHoliday = '1')
      // ‚Üí Ki·ªÉm tra chi ti·∫øt xem h√¥m nay c√≥ trong danh s√°ch l·ªãch ngh·ªâ kh√¥ng
      const isHoliday = await this.isTodayHoliday();
      this.logger.log(`üèñÔ∏è H√¥m nay c√≥ ph·∫£i ng√†y ngh·ªâ c·ª• th·ªÉ: ${isHoliday ? 'C√≥' : 'Kh√¥ng'}`);

      if (isHoliday) {
        this.logger.log('‚ùå Kh√¥ng th·ªÉ ch·∫°y: H√¥m nay c√≥ trong danh s√°ch l·ªãch ngh·ªâ c·ª• th·ªÉ');
        return false;
      }

      this.logger.log('‚úÖ ƒê∆∞·ª£c ph√©p ch·∫°y cronjob');
      return true;
    } catch (error) {
      this.logger.error('‚ùå L·ªói khi ki·ªÉm tra ƒëi·ªÅu ki·ªán ch·∫°y cronjob - M·∫∂C ƒê·ªäNH CH·∫∂N ƒë·ªÉ an to√†n:', error.stack);
      // Fail-safe: C√≥ l·ªói th√¨ kh√¥ng ch·∫°y ƒë·ªÉ an to√†n
      return false;
    }
  }

  /**
   * L·∫•y t√™n th·ª© trong tu·∫ßn
   */
  private getDayOfWeekName(dayOfWeek: number): string {
    const days = ['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'];
    return days[dayOfWeek];
  }

  /**
   * Ki·ªÉm tra c·∫•u h√¨nh c√≥ cho ph√©p ch·∫°y v√†o ch·ªß nh·∫≠t kh√¥ng
   */
  private async isSundayRunAllowed(): Promise<boolean> {
    try {
      const config = await this.systemConfigRepository.findOne({
        where: { name: 'system_scheduleSunday' },
      });
      
      const result = config?.value === '1';
      this.logger.log(`üìã system_scheduleSunday: ${config?.value || 'null'} ‚Üí ${result ? 'Cho ph√©p' : 'Kh√¥ng cho ph√©p'}`);
      
      return result;
    } catch (error) {
      this.logger.error('‚ùå L·ªói ki·ªÉm tra system_scheduleSunday:', error.message);
      return false; // Fail-safe
    }
  }

  /**
   * ‚úÖ S·ª¨A L·∫†I: Ki·ªÉm tra c·∫•u h√¨nh c√≥ cho ph√©p ch·∫°y v√†o ng√†y ngh·ªâ kh√¥ng
   * Logic: 0 = Ch·∫∑n ho√†n to√†n, 1 = Cho ph√©p nh∆∞ng check th√™m danh s√°ch c·ª• th·ªÉ
   */
  private async isHolidayRunAllowed(): Promise<boolean> {
    try {
      const config = await this.systemConfigRepository.findOne({
        where: { name: 'system_scheduleHoliday' },
      });
      
      const result = config?.value === '1';
      this.logger.log(`üìã system_scheduleHoliday: ${config?.value || 'null'} ‚Üí ${result ? 'Cho ph√©p ki·ªÉm tra chi ti·∫øt' : 'Ch·∫∑n ho√†n to√†n'}`);
      
      return result;
    } catch (error) {
      this.logger.error('‚ùå L·ªói ki·ªÉm tra system_scheduleHoliday:', error.message);
      return false; // Fail-safe
    }
  }

  /**
   * ‚úÖ S·ª¨A L·∫†I: Ki·ªÉm tra h√¥m nay c√≥ ph·∫£i ng√†y ngh·ªâ kh√¥ng (timezone ƒë·ªìng nh·∫•t)
   */
  private async isTodayHoliday(): Promise<boolean> {
    try {
      // S·ª≠ d·ª•ng timezone VN ƒë·ªìng nh·∫•t
      const today = new Date().toLocaleDateString('en-CA', {
        timeZone: 'Asia/Ho_Chi_Minh'
      }); // Format: YYYY-MM-DD
      
      this.logger.log(`üìÖ Ki·ªÉm tra ng√†y ngh·ªâ cho: ${today} (VN timezone)`);
      
      const holidayConfigs = await this.systemConfigRepository.find({
        where: [
          { name: 'holiday_multi_days' },
          { name: 'holiday_single_day' },
          { name: 'holiday_separated_days' },
        ],
      });

      this.logger.log(`üìã T√¨m th·∫•y ${holidayConfigs.length} c·∫•u h√¨nh ng√†y ngh·ªâ`);

      for (const config of holidayConfigs) {
        if (!config.value) {
          this.logger.log(`‚ö†Ô∏è ${config.name}: Kh√¥ng c√≥ gi√° tr·ªã`);
          continue;
        }

        try {
          const holidays = JSON.parse(config.value);
          this.logger.log(`üìã ${config.name}: ${holidays.length} nh√≥m ng√†y ngh·ªâ`);
          
          for (const holiday of holidays) {
            if (holiday.dates?.includes(today)) {
              this.logger.log(`üèñÔ∏è T√¨m th·∫•y ng√†y ngh·ªâ: ${today} - ${holiday.reason}`);
              return true;
            }
          }
        } catch (parseError) {
          this.logger.error(`‚ùå L·ªói parse JSON cho ${config.name}:`, parseError.message);
        }
      }

      this.logger.log(`‚úÖ ${today} kh√¥ng ph·∫£i ng√†y ngh·ªâ c·ª• th·ªÉ`);
      return false;
    } catch (error) {
      this.logger.error('‚ùå L·ªói ki·ªÉm tra ng√†y ngh·ªâ:', error.message);
      return true; // Fail-safe: C√≥ l·ªói th√¨ coi nh∆∞ ng√†y ngh·ªâ ƒë·ªÉ kh√¥ng ch·∫°y
    }
  }

  /**
   * L·∫•y danh s√°ch order_detail ch∆∞a b·ªã x√≥a m·ªÅm
   */
  private async getActiveOrderDetails(): Promise<OrderDetail[]> {
    const result = await this.orderDetailRepository.find({
      where: {
        deleted_at: IsNull(),
      },
      select: ['id', 'created_at', 'extended'],
      order: { created_at: 'ASC' }, // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o
    });

    this.logger.log(`üì¶ Query k·∫øt qu·∫£: ${result.length} order details active`);
    return result;
  }

  /**
   * ‚úÖ S·ª¨A L·∫†I: T√≠nh to√°n extended ch√≠nh x√°c theo s·ªë ng√†y th·ª±c t·∫ø
   * C√¥ng th·ª©c m·ªõi: T√≠nh s·ªë ng√†y ƒë√£ tr√¥i qua k·ªÉ t·ª´ khi t·∫°o
   */
  private calculateExpiredOrderDetails(orderDetails: OrderDetail[]): number[] {
    const currentDate = new Date();
    
    // Chu·∫©n h√≥a v·ªÅ ƒë·∫ßu ng√†y ƒë·ªÉ so s√°nh ch√≠nh x√°c (00:00:00)
    const currentDateOnly = new Date(
      currentDate.getFullYear(), 
      currentDate.getMonth(), 
      currentDate.getDate()
    );
    
    this.logger.log(`üî¢ === B·∫ÆT ƒê·∫¶U T√çNH TO√ÅN EXTENDED M·ªöI ===`);
    this.logger.log(`üìÖ Ng√†y hi·ªán t·∫°i: ${this.formatDate(currentDate)}`);
    this.logger.log(`üî¢ Timestamp hi·ªán t·∫°i (ƒë·∫ßu ng√†y): ${currentDateOnly.getTime()}`);
    
    const expiredIds: number[] = [];

    for (const orderDetail of orderDetails) {
      try {
        const createdDate = new Date(orderDetail.created_at);
        
        // Chu·∫©n h√≥a created_at v·ªÅ ƒë·∫ßu ng√†y
        const createdDateOnly = new Date(
          createdDate.getFullYear(), 
          createdDate.getMonth(), 
          createdDate.getDate()
        );
        
        const extended = orderDetail.extended || 4; // Default 4 n·∫øu null/undefined
        
        // T√≠nh s·ªë ng√†y ƒë√£ tr√¥i qua (d∆∞∆°ng s·ªë)
        const daysDifference = Math.floor(
          (currentDateOnly.getTime() - createdDateOnly.getTime()) / (1000 * 60 * 60 * 24)
        );
        
        // Logic m·ªõi: N·∫øu s·ªë ng√†y ƒë√£ qua >= extended th√¨ h·∫øt h·∫°n
        const isExpired = daysDifference >= extended;
        const remainingDays = extended - daysDifference;
        
        this.logger.log(`üìã Order Detail ID ${orderDetail.id}:`);
        this.logger.log(`   üìÖ Created at: ${this.formatDateTime(orderDetail.created_at)}`);
        this.logger.log(`   üìÖ Created date (chu·∫©n h√≥a): ${this.formatDate(createdDateOnly)}`);
        this.logger.log(`   ‚è∞ Extended: ${extended} ng√†y`);
        this.logger.log(`   üìä ƒê√£ t·ªìn t·∫°i: ${daysDifference} ng√†y`);
        this.logger.log(`   üßÆ So s√°nh: ${daysDifference} >= ${extended} ‚Üí ${isExpired ? 'H·∫æT H·∫†N' : 'C√íN H·∫†N'}`);
        
        if (isExpired) {
          expiredIds.push(orderDetail.id);
          this.logger.log(`   ‚ùå K·∫øt qu·∫£: H·∫æT H·∫†N ‚Üí S·∫º X√ìA M·ªÄM`);
        } else {
          this.logger.log(`   ‚úÖ K·∫øt qu·∫£: C√íN H·∫†N ‚Üí GI·ªÆ L·∫†I (c√≤n ${remainingDays} ng√†y)`);
        }
        this.logger.log(`   ---`);
      } catch (error) {
        this.logger.error(`‚ùå L·ªói khi x·ª≠ l√Ω Order Detail ID ${orderDetail.id}:`, error.message);
      }
    }

    this.logger.log(`üî¢ === K·∫æT QU·∫¢ T√çNH TO√ÅN EXTENDED ===`);
    this.logger.log(`üìä T·ªïng s·ªë order details ki·ªÉm tra: ${orderDetails.length}`);
    this.logger.log(`‚ùå S·ªë l∆∞·ª£ng h·∫øt h·∫°n c·∫ßn x√≥a: ${expiredIds.length}`);
    this.logger.log(`‚úÖ S·ªë l∆∞·ª£ng c√≤n hi·ªáu l·ª±c: ${orderDetails.length - expiredIds.length}`);
    
    if (expiredIds.length > 0) {
      this.logger.log(`üóëÔ∏è Danh s√°ch ID s·∫Ω x√≥a m·ªÅm: [${expiredIds.join(', ')}]`);
    }

    return expiredIds;
  }

  /**
   * Th·ª±c hi·ªán x√≥a m·ªÅm c√°c order_detail
   */
  private async softDeleteOrderDetails(ids: number[]): Promise<void> {
    const deleteTime = new Date();
    const reason = 'H·ªá Th·ªëng X√≥a T·ª± ƒê·ªông';
    this.logger.log(`üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a m·ªÅm t·∫°i: ${this.formatDateTime(deleteTime)}`);

    const result = await this.orderDetailRepository
      .createQueryBuilder()
      .update(OrderDetail)
      .set({ deleted_at: deleteTime, reason: reason })
      .where('id IN (:...ids)', { ids })
      .execute();

    this.logger.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t deleted_at cho ${result.affected} records`);
    this.logger.log(`üìã Chi ti·∫øt c√°c ID ƒë√£ x√≥a: [${ids.join(', ')}]`);
    this.logger.log(`üïê Th·ªùi gian x√≥a m·ªÅm: ${this.formatDateTime(deleteTime)}`);
  }

  /**
   * Manual trigger ƒë·ªÉ test (c√≥ th·ªÉ g·ªçi t·ª´ controller)
   */
  async manualCleanup(): Promise<{ 
    success: boolean; 
    deletedCount: number; 
    message: string; 
    executionLog: string[];
    executionTime: number;
  }> {
    const logs: string[] = [];
    const originalLog = this.logger.log.bind(this.logger);
    const startTime = new Date();
    
    // Capture logs ƒë·ªÉ tr·∫£ v·ªÅ
    this.logger.log = (message: string) => {
      logs.push(`${new Date().toISOString()}: ${message}`);
      originalLog(message);
    };

    try {
      this.logger.log('üîß Manual trigger cleanup ƒë∆∞·ª£c g·ªçi');
      this.logger.log(`üïê Th·ªùi gian b·∫Øt ƒë·∫ßu: ${this.formatDateTime(startTime)}`);
      
      // B·ªè qua ki·ªÉm tra ng√†y ngh·ªâ/ch·ªß nh·∫≠t khi manual trigger
      this.logger.log('‚ö†Ô∏è Manual mode: B·ªè qua ki·ªÉm tra ng√†y ngh·ªâ v√† ch·ªß nh·∫≠t');
      
      const orderDetails = await this.getActiveOrderDetails();
      const expiredIds = this.calculateExpiredOrderDetails(orderDetails);
      
      if (expiredIds.length > 0) {
        await this.softDeleteOrderDetails(expiredIds);
      }

      const endTime = new Date();
      const executionTime = endTime.getTime() - startTime.getTime();

      // Restore original log function
      this.logger.log = originalLog;

      return {
        success: true,
        deletedCount: expiredIds.length,
        message: `‚úÖ ƒê√£ x√≥a m·ªÅm ${expiredIds.length} order details`,
        executionLog: logs,
        executionTime
      };
    } catch (error) {
      // Restore original log function
      this.logger.log = originalLog;
      
      const endTime = new Date();
      const executionTime = endTime.getTime() - startTime.getTime();
      
      this.logger.error('‚ùå L·ªói trong manual cleanup:', error.stack);
      return {
        success: false,
        deletedCount: 0,
        message: `‚ùå L·ªói: ${error.message}`,
        executionLog: logs,
        executionTime
      };
    }
  }

  /**
   * ‚úÖ TH√äM M·ªöI: Debug method ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
   */
  async debugHolidayCheck(): Promise<{
    today: string;
    dayOfWeek: string;
    dayOfWeekNumber: number;
    isHoliday: boolean;
    allowHoliday: boolean;
    allowSunday: boolean;
    canRun: boolean;
    configs: any[];
  }> {
    const today = new Date();
    const todayStr = today.toLocaleDateString('en-CA', {
      timeZone: 'Asia/Ho_Chi_Minh'
    });
    const dayOfWeek = today.getDay();
    
    const isHoliday = await this.isTodayHoliday();
    const allowHoliday = await this.isHolidayRunAllowed();
    const allowSunday = await this.isSundayRunAllowed();
    const canRun = await this.canRunToday();
    
    const configs = await this.systemConfigRepository.find({
      where: [
        { name: 'system_scheduleHoliday' },
        { name: 'system_scheduleSunday' },
        { name: 'holiday_multi_days' },
        { name: 'holiday_single_day' },
        { name: 'holiday_separated_days' },
      ]
    });
    
    return {
      today: todayStr,
      dayOfWeek: this.getDayOfWeekName(dayOfWeek),
      dayOfWeekNumber: dayOfWeek,
      isHoliday,
      allowHoliday,
      allowSunday,
      canRun,
      configs
    };
  }

  /**
   * Th√™m method ƒë·ªÉ check status c·ªßa cronjob
   */
  async getCleanupStatus(): Promise<{
    canRunToday: boolean;
    todayInfo: {
      date: string;
      dayOfWeek: string;
      isSunday: boolean;
      isHoliday: boolean;
    };
    settings: {
      allowSunday: boolean;
      allowHoliday: boolean;
    };
    activeOrdersCount: number;
  }> {
    const today = new Date();
    const dayOfWeek = today.getDay();
    
    const canRunToday = await this.canRunToday();
    const isHoliday = await this.isTodayHoliday();
    const allowSunday = await this.isSundayRunAllowed();
    const allowHoliday = await this.isHolidayRunAllowed();
    
    const activeOrders = await this.getActiveOrderDetails();

    return {
      canRunToday,
      todayInfo: {
        date: this.formatDate(today),
        dayOfWeek: this.getDayOfWeekName(dayOfWeek),
        isSunday: dayOfWeek === 0,
        isHoliday,
      },
      settings: {
        allowSunday,
        allowHoliday,
      },
      activeOrdersCount: activeOrders.length,
    };
  }
}
