import { Injectable, Logger, Inject, forwardRef } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../users/user.entity';
import { UserStatusObserver } from '../observers/user-status.observer';
import { SystemConfig } from '../system_config/system_config.entity';

@Injectable()
export class ZaloLinkMonitorCronjob {
  private readonly logger = new Logger(ZaloLinkMonitorCronjob.name);
  private isRunning = false; // Lock ƒë·ªÉ tr√°nh duplicate execution
  private lastRunTime = 0; // Th·ªùi gian ch·∫°y cu·ªëi c√πng
  private processedUsers = new Set<number>(); // Set ƒë·ªÉ track user ƒë√£ x·ª≠ l√Ω trong phi√™n n√†y

  constructor(
    @InjectRepository(User)
    private readonly userRepo: Repository<User>,
    @InjectRepository(SystemConfig)
    private readonly systemConfigRepo: Repository<SystemConfig>,
    @Inject(forwardRef(() => UserStatusObserver))
    private readonly userStatusObserver: UserStatusObserver,
  ) {
    this.logger.log('üöÄ ZaloLinkMonitorCronjob kh·ªüi ƒë·ªông');
  }

 
  @Cron(process.env.ZALO_LINK_MONITOR_CRON || '*/5 * * * *')
  async monitorZaloLinkStatus() {
    const currentTime = Date.now();
    
    // Ki·ªÉm tra lock ƒë·ªÉ tr√°nh duplicate execution
    if (this.isRunning) {
      this.logger.warn(`‚ö†Ô∏è Cronjob ƒëang ch·∫°y, b·ªè qua l·∫ßn n√†y ƒë·ªÉ tr√°nh duplicate`);
      return;
    }
    
    // Ki·ªÉm tra th·ªùi gian ch·∫°y cu·ªëi c√πng (tr√°nh ch·∫°y qu√° g·∫ßn nhau)
    if (currentTime - this.lastRunTime < 60000) { // 60 gi√¢y
      this.logger.warn(`‚ö†Ô∏è Cronjob v·ª´a ch·∫°y c√°ch ƒë√¢y ${Math.round((currentTime - this.lastRunTime) / 1000)}s, b·ªè qua ƒë·ªÉ tr√°nh duplicate`);
      return;
    }

    // Ki·ªÉm tra th·ªùi gian ngh·ªâ
    const isInRestTime = await this.checkRestTime();
    if (isInRestTime) {
      this.logger.log(`üò¥ B·ªè qua cronjob - ƒëang trong th·ªùi gian ngh·ªâ`);
      return;
    }

    this.isRunning = true;
    this.lastRunTime = currentTime;
    const startTime = Date.now();
    
    try {
        // L·∫•y t·∫•t c·∫£ user c√≥ zalo_link_status = 2 (l·ªói li√™n k·∫øt) ho·∫∑c zalo_link_status = 0
        // (ch√∫ng ta s·∫Ω ch·ªâ x·ª≠ l√Ω status 0 khi username tr√¥ng nh∆∞ s·ªë ƒëi·ªán tho·∫°i), v√† kh√¥ng b·ªã ban
        const allCandidates = await this.userRepo.find({
          where: [
            { zaloLinkStatus: 2, isBlock: false },
            { zaloLinkStatus: 0, isBlock: false },
          ],
          select: ['id', 'username', 'fullName', 'email', 'employeeCode', 'zaloLinkStatus', 'isBlock', 'updatedAt']
        });

        // L·ªçc b·ªè user thietpn v√† user kh√¥ng c√≥ email
        const usersToProcess = allCandidates.filter(user => {
          if (!user) return false;
          if (user.username === 'thietpn' || user.email === 'thietpn@nguyenkimvn.vn') return false;
          if (!user.email || user.email.trim() === '') return false;

          // N·∫øu status = 2 => x·ª≠ l√Ω lu√¥n
          if (user.zaloLinkStatus === 2) return true;

          // N·∫øu status = 0 => ch·ªâ x·ª≠ l√Ω n·∫øu username l√† s·ªë ƒëi·ªán tho·∫°i (9-12 ch·ªØ s·ªë)
          if (user.zaloLinkStatus === 0) {
            const uname = (user.username || '').toString();
            return /^\d{9,12}$/.test(uname);
          }

          return false;
        });

        this.logger.log(`üìä T√¨m th·∫•y ${allCandidates.length} candidate users (status 2 ho·∫∑c 0), sau khi l·ªçc thietpn v√† kh√¥ng c√≥ email c√≤n ${usersToProcess.length} users`);

        for (const user of usersToProcess) {
        // Ki·ªÉm tra user ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong phi√™n n√†y ch∆∞a
        if (this.processedUsers.has(user.id)) {
          this.logger.log(`‚è≠Ô∏è B·ªè qua user ${user.id} (${user.username}) - ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong phi√™n n√†y`);
          continue;
        }
        
          // G·ªçi API Python ƒë·ªÉ x·ª≠ l√Ω l·ªói li√™n k·∫øt ho·∫∑c ch∆∞a li√™n k·∫øt (t√πy status)
          await this.handleZaloLinkError(user);
        
        // ƒê√°nh d·∫•u user ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        this.processedUsers.add(user.id);
      }

    } catch (error) {
      this.logger.error(`L·ªói khi monitor Zalo link status: ${error.message}`);
    } finally {
      // Lu√¥n reset lock trong finally block
      this.isRunning = false;
      
      // Clear processed users sau m·ªói l·∫ßn ch·∫°y
      this.processedUsers.clear();
    }
  }

  private async handleZaloLinkError(user: User) {
    try {
      // G·ªçi tr·ª±c ti·∫øp API Python thay v√¨ trigger event (ƒë·ªÉ tr√°nh duplicate)
      const newStatus = user.zaloLinkStatus === 0 ? 0 : 2;
      await this.userStatusObserver.callPythonApiForLinkError({
        userId: user.id,
        oldStatus: user.zaloLinkStatus,
        newStatus,
        updatedBy: 'database_monitor',
        timestamp: new Date(),
      }, user);
    } catch (error) {
      this.logger.error(`L·ªói khi x·ª≠ l√Ω l·ªói li√™n k·∫øt cho user ${user.id}: ${error.message}`);
    }
  }

  // Reset lock n·∫øu b·ªã stuck
  resetLock() {
    this.isRunning = false;
  }

  // Ki·ªÉm tra th·ªùi gian ngh·ªâ
  private async checkRestTime(): Promise<boolean> {
    try {
      const config = await this.systemConfigRepo.findOne({
        where: { name: 'system_stopToolConfig' }
      });

      if (!config || !config.value) {
        this.logger.log('Kh√¥ng t√¨m th·∫•y config system_stopToolConfig, cho ph√©p ch·∫°y');
        return false;
      }

      const schedule = JSON.parse(config.value);
      const now = new Date();
      const currentDay = now.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
      const currentTime = now.toLocaleTimeString('en-US', { 
        hour12: false, 
        hour: '2-digit', 
        minute: '2-digit' 
      });

      // Ki·ªÉm tra ng√†y hi·ªán t·∫°i c√≥ trong schedule kh√¥ng
      if (!schedule[currentDay]) {
        this.logger.log(`Ng√†y ${currentDay} kh√¥ng c√≥ trong schedule, cho ph√©p ch·∫°y`);
        return false;
      }

      // Ki·ªÉm tra th·ªùi gian hi·ªán t·∫°i c√≥ n·∫±m trong kho·∫£ng ngh·ªâ kh√¥ng
      const daySchedule = schedule[currentDay];
      for (const timeSlot of daySchedule) {
        if (this.isTimeInRange(currentTime, timeSlot.start, timeSlot.end)) {
          this.logger.log(`Th·ªùi gian hi·ªán t·∫°i ${currentTime} n·∫±m trong kho·∫£ng ngh·ªâ ${timeSlot.start}-${timeSlot.end}`);
          return true;
        }
      }

      this.logger.log(`Th·ªùi gian hi·ªán t·∫°i ${currentTime} kh√¥ng n·∫±m trong kho·∫£ng ngh·ªâ, cho ph√©p ch·∫°y`);
      return false;

    } catch (error) {
      this.logger.error(`L·ªói khi ki·ªÉm tra th·ªùi gian ngh·ªâ: ${error.message}`);
      return false; // N·∫øu c√≥ l·ªói, cho ph√©p ch·∫°y
    }
  }

  // Ki·ªÉm tra th·ªùi gian c√≥ n·∫±m trong kho·∫£ng kh√¥ng
  private isTimeInRange(currentTime: string, startTime: string, endTime: string): boolean {
    const current = this.timeToMinutes(currentTime);
    const start = this.timeToMinutes(startTime);
    const end = this.timeToMinutes(endTime);

    if (start <= end) {
      // Kho·∫£ng th·ªùi gian trong c√πng 1 ng√†y (v√≠ d·ª•: 12:00-13:30)
      return current >= start && current <= end;
    } else {
      // Kho·∫£ng th·ªùi gian qua ng√†y (v√≠ d·ª•: 23:00-07:00)
      return current >= start || current <= end;
    }
  }

  // Chuy·ªÉn ƒë·ªïi th·ªùi gian th√†nh ph√∫t ƒë·ªÉ so s√°nh
  private timeToMinutes(time: string): number {
    const [hours, minutes] = time.split(':').map(Number);
    return hours * 60 + minutes;
  }
}
