import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { Role } from '../roles/role.entity';
import { User } from '../users/user.entity';
import { UserStatus } from '../users/user-status.enum';
import { SystemConfig } from '../system_config/system_config.entity';
import { SeedDebtTriggerService } from './seed-debt-trigger.service';
import { SeedCampaignTriggerService } from './seed-campaign-trigger.seed';

@Injectable()
export class SeedService implements OnModuleInit {
  constructor(
    @InjectRepository(Role)
    private readonly roleRepo: Repository<Role>,
    @InjectRepository(User)
    private readonly userRepo: Repository<User>,
    @InjectRepository(SystemConfig)
    private readonly systemConfigRepo: Repository<SystemConfig>,
    private readonly seedDebtTriggerService: SeedDebtTriggerService,
    private readonly seedCampaignTriggerService: SeedCampaignTriggerService,
  ) {}

  async onModuleInit() {
    await this.seedDebtTriggerService.seedTriggers();
    await this.seedCampaignTriggerService.seed();

    const existed = await this.userRepo.findOne({
      where: { username: 'admin' },
    });
    if (existed) {
      console.log('‚ö†Ô∏è Seeder skipped - admin already exists.');
    } else {
      // 1. T·∫°o role admin
      const adminRole = new Role();
      adminRole.name = 'admin';
      await this.roleRepo.save(adminRole);

      // 2. T·∫°o user admin
      const now = new Date();
      const adminUser = new User();
      adminUser.username = 'admin';
      adminUser.fullName = 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng';
      adminUser.email = 'admin@example.com';
      adminUser.status = UserStatus.ACTIVE;
      adminUser.isBlock = false;
      adminUser.employeeCode = 'EMP-ADMIN';
      adminUser.password = await bcrypt.hash('admin', 10);
      adminUser.roles = [adminRole];
      adminUser.departments = [];
      adminUser.lastLogin = now;

      await this.userRepo.save(adminUser);

      console.log('‚úÖ Seeder: ƒê√£ t·∫°o user admin th√†nh c√¥ng!');
      console.log('üëâ T√†i kho·∫£n test: admin / admin');
    }

    // Seed system_config n·∫øu ch∆∞a c√≥ b·∫£n ghi n√†o
    const systemConfigCount = await this.systemConfigRepo.count();
    if (systemConfigCount === 0) {
      const configs = [
        // system (chung)
        { name: 'system_stopToolConfig', display_name: 'C·∫•u h√¨nh th·ªùi gian d·ª´ng tool', value: '{"monday":[{"start":"00:00","end":"07:50"},{"start":"12:00","end":"13:30"},{"start":"17:45","end":"23:59"}],"tuesday":[{"start":"00:00","end":"07:50"},{"start":"12:00","end":"13:30"},{"start":"17:45","end":"23:59"}],"wednesday":[{"start":"00:00","end":"07:50"},{"start":"12:00","end":"13:30"},{"start":"17:45","end":"23:59"}],"thursday":[{"start":"00:00","end":"07:50"},{"start":"12:00","end":"13:30"},{"start":"17:45","end":"23:59"}],"friday":[{"start":"00:00","end":"07:50"},{"start":"12:00","end":"13:30"},{"start":"17:45","end":"23:59"}],"saturday":[{"start":"00:00","end":"07:50"},{"start":"12:00","end":"13:30"},{"start":"16:00","end":"23:59"}],"sunday":[{"start":"00:00","end":"23:59"}]}', type: 'json', section: 'system', status: 1 },
        { name: 'system_apiRetry', display_name: 'S·ªë l·∫ßn th·ª≠ l·∫°i api', value: '5', type: 'number', section: 'system', status: 1 },
        { name: 'system_apiInterval', display_name: 'Th·ªùi gian x·ª≠ l√Ω api l·∫∑p l·∫°i', value: '5', type: 'number', section: 'system', status: 1 },
        { name: 'system_scheduleHoliday', display_name: 'L·ªãch ngh·ªâ', value: '1', type: 'toggle', section: 'system', status: 1 },
        { name: 'system_processOrder', display_name: 'X·ª≠ l√Ω giao d·ªãch', value: '1', type: 'toggle', section: 'system', status: 1 },
        { name: 'system_processDebt', display_name: 'X·ª≠ l√Ω c√¥ng n·ª£', value: '1', type: 'toggle', section: 'system', status: 1 },
        { name: 'system_aiModelName', display_name: 'Model AI x·ª≠ l√Ω tin nh·∫Øn', value: 'gpt-4o-mini-2024-07-18', type: 'text', section: 'system', status: 1 },
        { name: 'system_aiMaxOutputTokens', display_name: 'Gi·ªõi h·∫°n token ƒë·∫ßu ra AI x·ª≠ l√Ω', value: '4000', type: 'number', section: 'system', status: 1 },
        { name: 'system_aiTemperature', display_name: 'Temperature Model AI', value: '0.0', type: 'number', section: 'system', status: 1 },
        { name: 'system_aiTimeout', display_name: 'Th·ªùi gian timeout x·ª≠ l√Ω AI', value: '30', type: 'number', section: 'system', status: 1 },
        { name: 'system_aiRetry', display_name: 'S·ªë l·∫ßn th·ª≠ l·∫°i x·ª≠ l√Ω AI', value: '3', type: 'number', section: 'system', status: 1 },
        { name: 'system_processCampaign', display_name: 'X·ª≠ l√Ω chi·∫øn d·ªãch', value: '1', type: 'number', section: 'system', status: 1 },

        // transaction
        { name: 'transaction_threads', display_name: 'T·ªïng lu·ªìng ch·∫°y Giao d·ªãch', value: '3', type: 'number', section: 'transaction', status: 1 },
        { name: 'transaction_batch', display_name: 'T·ªïng x·ª≠ l√Ω s·ªë l∆∞·ª£ng h·ªôi tho·∫°i 1 l·∫ßn Giao d·ªãch ', value: '300', type: 'number', section: 'transaction', status: 1 },
        { name: 'transaction_rest', display_name: 'Th·ªùi gian ngh·ªâ khi x·ª≠ l√Ω Giao d·ªãch ', value: '300', type: 'number', section: 'transaction', status: 1 },
        { name: 'transaction_timeout', display_name: 'Th·ªùi gian timeout c·ªßa lu·ªìng Giao d·ªãch ', value: '30', type: 'number', section: 'transaction', status: 1 },

        // holiday
        { name: 'holiday_multi_days', display_name: 'L·ªãch ngh·ªâ nhi·ªÅu ng√†y li√™n t·ª•c', value: '[]', type: 'json', section: 'holiday', status: 1 },
        { name: 'holiday_single_day', display_name: 'L·ªãch ngh·ªâ 1 ng√†y', value: '[]', type: 'json', section: 'holiday', status: 1 },
        { name: 'holiday_separated_days', display_name: 'L·ªãch ngh·ªâ c√°c ng√†y kh√¥ng li√™n t·ª•c', value: '[]', type: 'json', section: 'holiday', status: 1 },

        // debt (c√°c config kh√°c)
        { name: 'debt_firstReminderSentence', display_name: 'C√¢u nh·∫Øc n·ª£ l·∫ßn 1', value: '{you} ∆°i, em xin ph√©p nh·∫Øc l·∫ßn n·ªØa n·ªôi dung ƒë√£ g·ª≠i tr∆∞·ªõc ƒë√≥ v·ªÅ kho·∫£n thanh to√°n ƒë·∫øn h·∫°n. R·∫•t mong {you} s·ªõm ph·∫£n h·ªìi ƒë·ªÉ em ti·ªán c·∫≠p nh·∫≠t v√† h·ªó tr·ª£ k·ªãp th·ªùi. Em ch√¢n th√†nh c·∫£m ∆°n!', type: 'text', section: 'debt', status: 1 },
        { name: 'debt_secondReminderSentence', display_name: 'C√¢u nh·∫Øc n·ª£ l·∫ßn 2', value: 'D·∫°, em xin ph√©p nh·∫Øc l·∫ßn n·ªØa th√¥ng tin c√¥ng n·ª£ g·ª≠i {you} c√°ch ƒë√¢y √≠t ph√∫t ·∫°. Mong {you} s·∫Øp x·∫øp th·ªùi gian xem gi√∫p v√† ph·∫£n h·ªìi s·ªõm l·ªãch thanh to√°n ƒë·ªÉ em ti·ªán theo d√µi v√† h·ªó tr·ª£ ti·∫øp theo ·∫°. Em c·∫£m ∆°n {you} nhi·ªÅu!', type: 'text', section: 'debt', status: 1 },
        { name: 'debt_firstReminderDelayTime', display_name: 'Th·ªùi gian tr√¨ ho√£n nh·∫Øc n·ª£ l·∫ßn 1', value: '1', type: 'number', section: 'debt', status: 1 },
        { name: 'debt_secondReminderDelayTime', display_name: 'Th·ªùi gian tr√¨ ho√£n nh·∫Øc n·ª£ l·∫ßn 2', value: '1', type: 'number', section: 'debt', status: 1 },
        { name: 'debt_reminderForSale', display_name: 'C√¢u nh·∫Øc b√°o cho sale', value: 'Nh·ªù KD h·ªó tr·ª£ nh·∫Øc l·∫°i v·ªõi kh√°ch h√†ng {customer_code} hi·ªán c√≤n n·ª£ s·ªë ti·ªÅn {amount} ƒë·∫øn h·∫°n. K·∫ø to√°n ƒë√£ nh·∫Øc v√†i l·∫ßn nh∆∞ng ch∆∞a th·∫•y ph·∫£n h·ªìi. Mong KD h·ªó tr·ª£ gi√∫p ƒë·ªÉ thu h·ªìi c√¥ng n·ª£ ƒë√∫ng h·∫°n. Em c·∫£m ∆°n KD nhi·ªÅu!', type: 'text', section: 'debt', status: 1 },
        { name: 'debt_runTime', display_name: 'Th·ªùi gian ch·∫°y c√¥ng n·ª£', value: '08:00', type: 'time', section: 'debt', status: 1 },
        { name: 'debt_rest', display_name: 'Th·ªùi gian ngh·ªâ c√¥ng n·ª£', value: '5', type: 'number', section: 'debt', status: 1 },
        { name: 'debt_timeout', display_name: 'Th·ªùi gian timeout c√¥ng n·ª£', value: '30', type: 'number', section: 'debt', status: 1 },
        { name: 'debt_max_workers', display_name: 'S·ªë l∆∞·ª£ng worker t·ªëi ƒëa cho c√¥ng n·ª£', value: '5', type: 'number', section: 'debt', status: 1 },
        { name: 'debt_batch', display_name: 'T·ªïng x·ª≠ l√Ω s·ªë l∆∞·ª£ng h·ªôi tho·∫°i 1 l·∫ßn C√¥ng n·ª£', value: '300', type: 'number', section: 'debt', status: 1 },

        // campaign
        { name: 'campaign_runTime', display_name: 'Th·ªùi gian ch·∫°y chi·∫øn d·ªãch', value: '08:00', type: 'time', section: 'campaign', status: 1 },
        { name: 'campaign_rest', display_name: 'Th·ªùi gian ngh·ªâ chi·∫øn d·ªãch', value: '5', type: 'number', section: 'campaign', status: 1 },
        { name: 'campaign_timeout', display_name: 'Th·ªùi gian timeout chi·∫øn d·ªãch', value: '30', type: 'number', section: 'campaign', status: 1 },
        { name: 'campaign_max_workers', display_name: 'S·ªë l∆∞·ª£ng worker t·ªëi ƒëa cho chi·∫øn d·ªãch', value: '5', type: 'number', section: 'campaign', status: 1 },
        { name: 'campaign_batch', display_name: 'T·ªïng x·ª≠ l√Ω s·ªë l∆∞·ª£ng h·ªôi tho·∫°i 1 l·∫ßn Chi·∫øn d·ªãch', value: '300', type: 'number', section: 'campaign', status: 1 },
      ];
      for (const config of configs) {
        await this.systemConfigRepo.save(this.systemConfigRepo.create(config));
      }
      console.log('‚úÖ Seeder: ƒê√£ t·∫°o system_config th√†nh c√¥ng!');
    } else {
      console.log('‚ö†Ô∏è Seeder skipped - system_config ƒë√£ c√≥ d·ªØ li·ªáu.');
    }
  }
}
