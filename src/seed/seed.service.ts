import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';

import { Department } from '../departments/department.entity';
import { Permission } from '../permissions/permission.entity';
import { Role } from '../roles/role.entity';
import { User } from '../users/user.entity';
import { UserStatus } from '../users/user-status.enum';
import { RolePermission } from '../roles_permissions/roles-permissions.entity';

@Injectable()
export class SeedService implements OnModuleInit {
  constructor(
    @InjectRepository(Permission)
    private readonly permissionRepo: Repository<Permission>,
    @InjectRepository(Role)
    private readonly roleRepo: Repository<Role>,
    @InjectRepository(User)
    private readonly userRepo: Repository<User>,
    @InjectRepository(Department)
    private readonly departmentRepo: Repository<Department>,
    @InjectRepository(RolePermission)
    private readonly rolePermissionRepo: Repository<RolePermission>,
  ) {}

  async onModuleInit() {
    const existed = await this.userRepo.findOne({
      where: { username: 'admin' },
    });
    if (existed) {
      console.log('‚ö†Ô∏è Seeder skipped - admin already exists.');
      return;
    }

    // 1. T·∫°o departments (KH√îNG t·∫°o Product Management ·ªü ƒë√¢y)
    const departments = await this.departmentRepo.save([
      { name: 'Kinh doanh', slug: 'kinh-doanh' },
      { name: 'C√¥ng n·ª£', slug: 'cong-no' },
    ]);

    // ƒê·∫£m b·∫£o t√¨m th·∫•y department b·∫±ng c√°ch s·ª≠ d·ª•ng filter
    const depKD = departments.find((d) => d.name === 'Kinh doanh');
    const depCN = departments.find((d) => d.name === 'C√¥ng n·ª£');

    if (!depKD || !depCN) {
      throw new Error('Required departments not found in seed data');
    }

    // 2. T·∫°o permissions cho t·ª´ng ph√≤ng ban
    const actions = ['create', 'read', 'update', 'delete', 'import', 'export'];
    const permissions: Permission[] = [];
    for (const dep of [depKD, depCN]) {
      for (const action of actions) {
        permissions.push(
          this.permissionRepo.create({ name: dep.slug, action })
        );
      }
    }
    await this.permissionRepo.save(permissions);

    // 3. T·∫°o roles (Product Management l√† role, kh√¥ng ph·∫£i department)
    const adminRole = new Role();
    adminRole.name = 'admin';
    await this.roleRepo.save(adminRole);

    const managerRole = new Role();
    managerRole.name = 'manager';
    await this.roleRepo.save(managerRole);

    const userRole = new Role();
    userRole.name = 'user';
    await this.roleRepo.save(userRole);

    const productManagerRole = new Role();
    productManagerRole.name = 'product-manager';
    await this.roleRepo.save(productManagerRole);

    // 4. T·∫°o RolePermissions
    // Admin: to√†n quy·ªÅn, isActive = true
    const adminPermissions = permissions.map((permission) => {
      const rp = new RolePermission();
      rp.role = adminRole;
      rp.permission = permission;
      rp.isActive = true;
      return rp;
    });
    await this.rolePermissionRepo.save(adminPermissions);

    // Manager: to√†n quy·ªÅn nh∆∞ng c√≥ th·ªÉ b·∫≠t/t·∫Øt b·∫±ng is_active
    const managerPermissions = permissions.map((permission) => {
      const rp = new RolePermission();
      rp.role = managerRole;
      rp.permission = permission;
      rp.isActive = true;
      return rp;
    });
    await this.rolePermissionRepo.save(managerPermissions);

    // User: to√†n quy·ªÅn nh∆∞ng c√≥ th·ªÉ b·∫≠t/t·∫Øt b·∫±ng is_active
    const userPermissions = permissions.map((permission) => {
      const rp = new RolePermission();
      rp.role = userRole;
      rp.permission = permission;
      rp.isActive = true;
      return rp;
    });
    await this.rolePermissionRepo.save(userPermissions);

    // Product Manager: ch∆∞a g√°n permission n√†o (t√πy b·∫°n mu·ªën g√°n g√¨ th√¨ th√™m v√†o)

    // 5. T·∫°o users
    // ƒê·ªÉ c√°c tr∆∞·ªùng ng√†y gi·ªù l√† Date, ƒë·ªÉ DB t·ª± ƒë·ªông x·ª≠ l√Ω ƒë√∫ng timezone
    // Kh√¥ng d√πng formatToVietnamDatetime ·ªü ƒë√¢y!
    const now = new Date();

    // Admin: kh√¥ng c√≥ nh√≥m, to√†n quy·ªÅn
    const adminUser = new User();
    adminUser.username = 'admin';
    adminUser.fullName = 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng';
    adminUser.email = 'admin@example.com';
    adminUser.status = UserStatus.ACTIVE;
    adminUser.isBlock = false;
    adminUser.employeeCode = 'EMP-ADMIN';
    adminUser.password = await bcrypt.hash('admin', 10);
    adminUser.roles = [adminRole];
    adminUser.departments = [];
    adminUser.lastLogin = now;
    // createdAt, updatedAt s·∫Ω ƒë·ªÉ DB t·ª± ƒë·ªông set

    // Manager: username l√† s·ªë ƒëi·ªán tho·∫°i
    const managerUser = new User();
    managerUser.username = '0987654321';
    managerUser.fullName = 'Nguy·ªÖn VƒÉn Qu·∫£n L√Ω';
    managerUser.email = 'manager_kd@example.com';
    managerUser.status = UserStatus.ACTIVE;
    managerUser.isBlock = false;
    managerUser.employeeCode = 'EMP-MANAGER';
    managerUser.password = await bcrypt.hash('managerpass', 10);
    managerUser.roles = [managerRole];
    managerUser.departments = [depKD];
    managerUser.lastLogin = now;

    // User: username l√† s·ªë ƒëi·ªán tho·∫°i
    const normalUser = new User();
    normalUser.username = '0978123456';
    normalUser.fullName = 'Tr·∫ßn Th·ªã Nh√¢n Vi√™n';
    normalUser.email = 'user_kd@example.com';
    normalUser.status = UserStatus.ACTIVE;
    normalUser.isBlock = false;
    normalUser.employeeCode = 'EMP-USER1';
    normalUser.password = await bcrypt.hash('userpass', 10);
    normalUser.roles = [userRole];
    normalUser.departments = [depKD];
    normalUser.lastLogin = now;

    // User kh√°c: username l√† s·ªë ƒëi·ªán tho·∫°i, b·ªã kh√≥a
    const cnUser = new User();
    cnUser.username = '0966998877';
    cnUser.fullName = 'L√™ C√¥ng N·ª£';
    cnUser.email = 'user_cn@example.com';
    cnUser.status = UserStatus.INACTIVE;
    cnUser.isBlock = true;
    cnUser.employeeCode = 'EMP-USER2';
    cnUser.password = await bcrypt.hash('userpass', 10);
    cnUser.roles = [userRole];
    cnUser.departments = [depCN];
    cnUser.lastLogin = now;

    await this.userRepo.save([adminUser, managerUser, normalUser, cnUser]);

    console.log('‚úÖ Seeder: ƒê√£ t·∫°o d·ªØ li·ªáu m·∫´u th√†nh c√¥ng!');
    console.log('üëâ T√†i kho·∫£n test:');
    console.log('   - admin (full quy·ªÅn, kh√¥ng nh√≥m)');
    console.log('   - manager_kd (Kinh doanh, quy·ªÅn manager - to√†n quy·ªÅn)');
    console.log('   - user_kd (Kinh doanh, quy·ªÅn user - to√†n quy·ªÅn)');
    console.log(
      '   - user_cn (C√¥ng n·ª£, quy·ªÅn user - to√†n quy·ªÅn, tr·∫°ng th√°i INACTIVE)',
    );
  }
}